/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.12.0 (NJsonSchema v9.13.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class HeightmapDto implements IHeightmapDto {
    id!: string;
    width!: number;
    height!: number;
    heightmapByteArray?: string | null;
    heightmapOriginalArray?: number[] | null;

    constructor(data?: IHeightmapDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
            this.heightmapByteArray = data["HeightmapByteArray"] !== undefined ? data["HeightmapByteArray"] : <any>null;
            if (data["HeightmapOriginalArray"] && data["HeightmapOriginalArray"].constructor === Array) {
                this.heightmapOriginalArray = [] as any;
                for (let item of data["HeightmapOriginalArray"])
                    this.heightmapOriginalArray!.push(item);
            }
        }
    }

    static fromJS(data: any): HeightmapDto {
        data = typeof data === 'object' ? data : {};
        let result = new HeightmapDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        data["HeightmapByteArray"] = this.heightmapByteArray !== undefined ? this.heightmapByteArray : <any>null;
        if (this.heightmapOriginalArray && this.heightmapOriginalArray.constructor === Array) {
            data["HeightmapOriginalArray"] = [];
            for (let item of this.heightmapOriginalArray)
                data["HeightmapOriginalArray"].push(item);
        }
        return data; 
    }

    clone(): HeightmapDto {
        const json = this.toJSON();
        let result = new HeightmapDto();
        result.init(json);
        return result;
    }
}

export interface IHeightmapDto {
    id: string;
    width: number;
    height: number;
    heightmapByteArray?: string | null;
    heightmapOriginalArray?: number[] | null;
}

export class HeightmapInfoDto implements IHeightmapInfoDto {
    id!: string;
    width!: number;
    height!: number;

    constructor(data?: IHeightmapInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
        }
    }

    static fromJS(data: any): HeightmapInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new HeightmapInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        return data; 
    }

    clone(): HeightmapInfoDto {
        const json = this.toJSON();
        let result = new HeightmapInfoDto();
        result.init(json);
        return result;
    }
}

export interface IHeightmapInfoDto {
    id: string;
    width: number;
    height: number;
}

export class LocationDto implements ILocationDto {
    playerId!: number;
    positionX!: number;
    positionY!: number;
    positionZ!: number;
    rotationX!: number;
    rotationY!: number;
    rotationZ!: number;

    constructor(data?: ILocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.playerId = data["PlayerId"] !== undefined ? data["PlayerId"] : <any>null;
            this.positionX = data["PositionX"] !== undefined ? data["PositionX"] : <any>null;
            this.positionY = data["PositionY"] !== undefined ? data["PositionY"] : <any>null;
            this.positionZ = data["PositionZ"] !== undefined ? data["PositionZ"] : <any>null;
            this.rotationX = data["RotationX"] !== undefined ? data["RotationX"] : <any>null;
            this.rotationY = data["RotationY"] !== undefined ? data["RotationY"] : <any>null;
            this.rotationZ = data["RotationZ"] !== undefined ? data["RotationZ"] : <any>null;
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PlayerId"] = this.playerId !== undefined ? this.playerId : <any>null;
        data["PositionX"] = this.positionX !== undefined ? this.positionX : <any>null;
        data["PositionY"] = this.positionY !== undefined ? this.positionY : <any>null;
        data["PositionZ"] = this.positionZ !== undefined ? this.positionZ : <any>null;
        data["RotationX"] = this.rotationX !== undefined ? this.rotationX : <any>null;
        data["RotationY"] = this.rotationY !== undefined ? this.rotationY : <any>null;
        data["RotationZ"] = this.rotationZ !== undefined ? this.rotationZ : <any>null;
        return data; 
    }

    clone(): LocationDto {
        const json = this.toJSON();
        let result = new LocationDto();
        result.init(json);
        return result;
    }
}

export interface ILocationDto {
    playerId: number;
    positionX: number;
    positionY: number;
    positionZ: number;
    rotationX: number;
    rotationY: number;
    rotationZ: number;
}

export class PlayerDto implements IPlayerDto {
    id!: number;
    name?: string | null;
    sessionId!: string;
    signalRConnectionId?: string | null;
    location?: LocationDto | null;

    constructor(data?: IPlayerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.signalRConnectionId = data["SignalRConnectionId"] !== undefined ? data["SignalRConnectionId"] : <any>null;
            this.location = data["Location"] ? LocationDto.fromJS(data["Location"]) : <any>null;
        }
    }

    static fromJS(data: any): PlayerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["SignalRConnectionId"] = this.signalRConnectionId !== undefined ? this.signalRConnectionId : <any>null;
        data["Location"] = this.location ? this.location.toJSON() : <any>null;
        return data; 
    }

    clone(): PlayerDto {
        const json = this.toJSON();
        let result = new PlayerDto();
        result.init(json);
        return result;
    }
}

export interface IPlayerDto {
    id: number;
    name?: string | null;
    sessionId: string;
    signalRConnectionId?: string | null;
    location?: LocationDto | null;
}

export class CreateGameSessionRequestDto implements ICreateGameSessionRequestDto {
    playerName?: string | null;

    constructor(data?: ICreateGameSessionRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.playerName = data["PlayerName"] !== undefined ? data["PlayerName"] : <any>null;
        }
    }

    static fromJS(data: any): CreateGameSessionRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGameSessionRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PlayerName"] = this.playerName !== undefined ? this.playerName : <any>null;
        return data; 
    }

    clone(): CreateGameSessionRequestDto {
        const json = this.toJSON();
        let result = new CreateGameSessionRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICreateGameSessionRequestDto {
    playerName?: string | null;
}

export class DiamondSquareHeightmapRequestDto implements IDiamondSquareHeightmapRequestDto {
    size!: number;
    offsetRange!: number;
    offsetReductionRate!: number;

    constructor(data?: IDiamondSquareHeightmapRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.size = data["Size"] !== undefined ? data["Size"] : <any>null;
            this.offsetRange = data["OffsetRange"] !== undefined ? data["OffsetRange"] : <any>null;
            this.offsetReductionRate = data["OffsetReductionRate"] !== undefined ? data["OffsetReductionRate"] : <any>null;
        }
    }

    static fromJS(data: any): DiamondSquareHeightmapRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new DiamondSquareHeightmapRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Size"] = this.size !== undefined ? this.size : <any>null;
        data["OffsetRange"] = this.offsetRange !== undefined ? this.offsetRange : <any>null;
        data["OffsetReductionRate"] = this.offsetReductionRate !== undefined ? this.offsetReductionRate : <any>null;
        return data; 
    }

    clone(): DiamondSquareHeightmapRequestDto {
        const json = this.toJSON();
        let result = new DiamondSquareHeightmapRequestDto();
        result.init(json);
        return result;
    }
}

export interface IDiamondSquareHeightmapRequestDto {
    size: number;
    offsetRange: number;
    offsetReductionRate: number;
}

export class FaultHeightmapRequestDto implements IFaultHeightmapRequestDto {
    width!: number;
    height!: number;
    iterationCount!: number;
    offsetPerIteration!: number;

    constructor(data?: IFaultHeightmapRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
            this.iterationCount = data["IterationCount"] !== undefined ? data["IterationCount"] : <any>null;
            this.offsetPerIteration = data["OffsetPerIteration"] !== undefined ? data["OffsetPerIteration"] : <any>null;
        }
    }

    static fromJS(data: any): FaultHeightmapRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new FaultHeightmapRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        data["IterationCount"] = this.iterationCount !== undefined ? this.iterationCount : <any>null;
        data["OffsetPerIteration"] = this.offsetPerIteration !== undefined ? this.offsetPerIteration : <any>null;
        return data; 
    }

    clone(): FaultHeightmapRequestDto {
        const json = this.toJSON();
        let result = new FaultHeightmapRequestDto();
        result.init(json);
        return result;
    }
}

export interface IFaultHeightmapRequestDto {
    width: number;
    height: number;
    iterationCount: number;
    offsetPerIteration: number;
}

export class JoinGameSessionRequestDto implements IJoinGameSessionRequestDto {
    sessionId?: string | null;
    playerName?: string | null;

    constructor(data?: IJoinGameSessionRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.playerName = data["PlayerName"] !== undefined ? data["PlayerName"] : <any>null;
        }
    }

    static fromJS(data: any): JoinGameSessionRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new JoinGameSessionRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["PlayerName"] = this.playerName !== undefined ? this.playerName : <any>null;
        return data; 
    }

    clone(): JoinGameSessionRequestDto {
        const json = this.toJSON();
        let result = new JoinGameSessionRequestDto();
        result.init(json);
        return result;
    }
}

export interface IJoinGameSessionRequestDto {
    sessionId?: string | null;
    playerName?: string | null;
}

export class OpenSimplexRequestDto implements IOpenSimplexRequestDto {
    width!: number;
    height!: number;
    seed!: number;
    scale!: number;
    octaves!: number;
    persistance!: number;
    lacunarity!: number;
    infinite!: boolean;

    constructor(data?: IOpenSimplexRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
            this.seed = data["Seed"] !== undefined ? data["Seed"] : <any>null;
            this.scale = data["Scale"] !== undefined ? data["Scale"] : <any>null;
            this.octaves = data["Octaves"] !== undefined ? data["Octaves"] : <any>null;
            this.persistance = data["Persistance"] !== undefined ? data["Persistance"] : <any>null;
            this.lacunarity = data["Lacunarity"] !== undefined ? data["Lacunarity"] : <any>null;
            this.infinite = data["Infinite"] !== undefined ? data["Infinite"] : <any>null;
        }
    }

    static fromJS(data: any): OpenSimplexRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new OpenSimplexRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        data["Seed"] = this.seed !== undefined ? this.seed : <any>null;
        data["Scale"] = this.scale !== undefined ? this.scale : <any>null;
        data["Octaves"] = this.octaves !== undefined ? this.octaves : <any>null;
        data["Persistance"] = this.persistance !== undefined ? this.persistance : <any>null;
        data["Lacunarity"] = this.lacunarity !== undefined ? this.lacunarity : <any>null;
        data["Infinite"] = this.infinite !== undefined ? this.infinite : <any>null;
        return data; 
    }

    clone(): OpenSimplexRequestDto {
        const json = this.toJSON();
        let result = new OpenSimplexRequestDto();
        result.init(json);
        return result;
    }
}

export interface IOpenSimplexRequestDto {
    width: number;
    height: number;
    seed: number;
    scale: number;
    octaves: number;
    persistance: number;
    lacunarity: number;
    infinite: boolean;
}

export class RandomHeightmapRequestDto implements IRandomHeightmapRequestDto {
    width!: number;
    height!: number;

    constructor(data?: IRandomHeightmapRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
        }
    }

    static fromJS(data: any): RandomHeightmapRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RandomHeightmapRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        return data; 
    }

    clone(): RandomHeightmapRequestDto {
        const json = this.toJSON();
        let result = new RandomHeightmapRequestDto();
        result.init(json);
        return result;
    }
}

export interface IRandomHeightmapRequestDto {
    width: number;
    height: number;
}

export class StartGameSesionRequestDto implements IStartGameSesionRequestDto {
    sessionId!: string;
    terrainDataId!: string;

    constructor(data?: IStartGameSesionRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.terrainDataId = data["TerrainDataId"] !== undefined ? data["TerrainDataId"] : <any>null;
        }
    }

    static fromJS(data: any): StartGameSesionRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new StartGameSesionRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["TerrainDataId"] = this.terrainDataId !== undefined ? this.terrainDataId : <any>null;
        return data; 
    }

    clone(): StartGameSesionRequestDto {
        const json = this.toJSON();
        let result = new StartGameSesionRequestDto();
        result.init(json);
        return result;
    }
}

export interface IStartGameSesionRequestDto {
    sessionId: string;
    terrainDataId: string;
}

export class HeightmapInfoResponseDto implements IHeightmapInfoResponseDto {
    id!: string;
    width!: number;
    height!: number;

    constructor(data?: IHeightmapInfoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.width = data["Width"] !== undefined ? data["Width"] : <any>null;
            this.height = data["Height"] !== undefined ? data["Height"] : <any>null;
        }
    }

    static fromJS(data: any): HeightmapInfoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new HeightmapInfoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Width"] = this.width !== undefined ? this.width : <any>null;
        data["Height"] = this.height !== undefined ? this.height : <any>null;
        return data; 
    }

    clone(): HeightmapInfoResponseDto {
        const json = this.toJSON();
        let result = new HeightmapInfoResponseDto();
        result.init(json);
        return result;
    }
}

export interface IHeightmapInfoResponseDto {
    id: string;
    width: number;
    height: number;
}

export class JoinGameSessionMessage implements IJoinGameSessionMessage {
    sessionId?: string | null;
    playerName?: string | null;

    constructor(data?: IJoinGameSessionMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.playerName = data["PlayerName"] !== undefined ? data["PlayerName"] : <any>null;
        }
    }

    static fromJS(data: any): JoinGameSessionMessage {
        data = typeof data === 'object' ? data : {};
        let result = new JoinGameSessionMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["PlayerName"] = this.playerName !== undefined ? this.playerName : <any>null;
        return data; 
    }

    clone(): JoinGameSessionMessage {
        const json = this.toJSON();
        let result = new JoinGameSessionMessage();
        result.init(json);
        return result;
    }
}

export interface IJoinGameSessionMessage {
    sessionId?: string | null;
    playerName?: string | null;
}

export class LocationChangedMessage implements ILocationChangedMessage {
    sessionId?: string | null;
    location?: LocationDto | null;

    constructor(data?: ILocationChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.location = data["Location"] ? LocationDto.fromJS(data["Location"]) : <any>null;
        }
    }

    static fromJS(data: any): LocationChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new LocationChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["Location"] = this.location ? this.location.toJSON() : <any>null;
        return data; 
    }

    clone(): LocationChangedMessage {
        const json = this.toJSON();
        let result = new LocationChangedMessage();
        result.init(json);
        return result;
    }
}

export interface ILocationChangedMessage {
    sessionId?: string | null;
    location?: LocationDto | null;
}

export class MapLoadedMessage implements IMapLoadedMessage {
    sessionId?: string | null;
    location?: LocationDto | null;

    constructor(data?: IMapLoadedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["SessionId"] !== undefined ? data["SessionId"] : <any>null;
            this.location = data["Location"] ? LocationDto.fromJS(data["Location"]) : <any>null;
        }
    }

    static fromJS(data: any): MapLoadedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new MapLoadedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["Location"] = this.location ? this.location.toJSON() : <any>null;
        return data; 
    }

    clone(): MapLoadedMessage {
        const json = this.toJSON();
        let result = new MapLoadedMessage();
        result.init(json);
        return result;
    }
}

export interface IMapLoadedMessage {
    sessionId?: string | null;
    location?: LocationDto | null;
}

export class SplatmapDto implements ISplatmapDto {
    id!: string;
    splatmapByteArray?: string | null;

    constructor(data?: ISplatmapDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"] !== undefined ? data["Id"] : <any>null;
            this.splatmapByteArray = data["SplatmapByteArray"] !== undefined ? data["SplatmapByteArray"] : <any>null;
        }
    }

    static fromJS(data: any): SplatmapDto {
        data = typeof data === 'object' ? data : {};
        let result = new SplatmapDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["SplatmapByteArray"] = this.splatmapByteArray !== undefined ? this.splatmapByteArray : <any>null;
        return data; 
    }

    clone(): SplatmapDto {
        const json = this.toJSON();
        let result = new SplatmapDto();
        result.init(json);
        return result;
    }
}

export interface ISplatmapDto {
    id: string;
    splatmapByteArray?: string | null;
}

export enum HeightmapType {
    Fault = "Fault", 
    DiamondSquare = "DiamondSquare", 
    OpenSimplex = "OpenSimplex", 
}

export class HeightmapChunkRequestDto implements IHeightmapChunkRequestDto {
    baseHeightmapChunkId!: string;
    offsetX!: number;
    offsetZ!: number;

    constructor(data?: IHeightmapChunkRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.baseHeightmapChunkId = data["BaseHeightmapChunkId"] !== undefined ? data["BaseHeightmapChunkId"] : <any>null;
            this.offsetX = data["OffsetX"] !== undefined ? data["OffsetX"] : <any>null;
            this.offsetZ = data["OffsetZ"] !== undefined ? data["OffsetZ"] : <any>null;
        }
    }

    static fromJS(data: any): HeightmapChunkRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new HeightmapChunkRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BaseHeightmapChunkId"] = this.baseHeightmapChunkId !== undefined ? this.baseHeightmapChunkId : <any>null;
        data["OffsetX"] = this.offsetX !== undefined ? this.offsetX : <any>null;
        data["OffsetZ"] = this.offsetZ !== undefined ? this.offsetZ : <any>null;
        return data; 
    }

    clone(): HeightmapChunkRequestDto {
        const json = this.toJSON();
        let result = new HeightmapChunkRequestDto();
        result.init(json);
        return result;
    }
}

export interface IHeightmapChunkRequestDto {
    baseHeightmapChunkId: string;
    offsetX: number;
    offsetZ: number;
}